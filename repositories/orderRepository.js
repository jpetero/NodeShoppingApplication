const Order = require('../models/order');

class OrderRepository {
  constructor() {}

  // Add a new order to the database
  saveNewOrderToDb(newOrder, newTransaction) {
    const orderDetails = {
      id: newOrder.id,
      totalAmount: newOrder.totalAmount,
      applicationMode: newOrder.applicationMode,
      phone: newOrder.phone,
      email: newOrder.email,
      orderProducts: JSON.stringify(newOrder.orderProducts),
      deliveryAddress: newOrder.deliveryAddress,
      // Generated by the API
      deliveryStatus: 'Not Delivered',
      placedOn: newTransaction.createdOn,
      paymentStatus: 'PROCESSING',
      transactionId: newTransaction.id,
      userId: newOrder.userId
    };

    const order = new Order(orderDetails);
    return new Promise((resolve, reject) => {
      order.save((error, createdOrder) => {
        if (error) {
          reject(error);
        } else {
          resolve(createdOrder);
        }
      });
    });
  }

  // Fetch all the orders made by a particular user
  GetOrdersByUserId(userId) {
    return new Promise((resolve, reject) => {
      Order.find({ userId })
        .sort({ placedOn: -1 })
        .exec((error, response) => {
          if (error) {
            reject(error);
          } else {
            resolve(response);
          }
        });
    });
  }

  // Get an order with a particular ID
  GetOrderById(orderId) {
    return new Promise((resolve, reject) => {
      Order.findOne({ id: orderId }, (error, response) => {
        if (error) {
          reject(error);
        } else {
          resolve(response);
        }
      });
    });
  }

  // Update Order Payment status
  updateOrderPaymentStatus(orderId, orderStatus) {
    return new Promise((resolve, reject) => {
      Order.findOneAndUpdate(
        { id: orderId },
        { paymentStatus: orderStatus },
        { new: true },
        (error, response) => {
          if (error) {
            reject(error);
          } else {
            resolve(response);
          }
        }
      );
    });
  }

  // Get all orders
  async getAllOrders() {
    return await Order.find({})
      .sort({ placedOn: -1 })
      .exec();
  }

  // Orders count
  async getNumberOfOrders() {
    return await Order.countDocuments({});
  }
}

module.exports = new OrderRepository();
